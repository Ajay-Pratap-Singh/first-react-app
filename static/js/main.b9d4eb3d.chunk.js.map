{"version":3,"sources":["components/UserSummary.js","components/Post.js","components/Navbar.js","components/Categories/Category.js","components/Categories/index.js","App.js","serviceWorker.js","index.js"],"names":["UserSummary","props","useState","userPublicProfile","setUserPublicProfile","useEffect","a","userId","axios","get","data","className","name","username","Spinner","animation","role","size","Post","Card","Body","title","body","Footer","NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Form","inline","FormControl","type","placeholder","Button","variant","Category","open","setOpen","following","follow","setFollow","ListGroup","Item","onMouseEnter","onMouseLeave","Fade","in","aria-expanded","onClick","CategoriesPanel","categories","setCategories","console","log","Title","map","obj","App","posts","setPosts","Provider","value","Container","fluid","Row","Col","Categories","md","lg","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b9d4eb3d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {Spinner} from 'react-bootstrap';\r\n\r\n\r\nconst UserSummary = (props) => {\r\n    const [userPublicProfile, setUserPublicProfile] = useState({});\r\n    useEffect(()=>{\r\n        (async ()=>{\r\n            if(props.userId)\r\n            setUserPublicProfile((await axios.get('https://jsonplaceholder.typicode.com/users/'+props.userId)).data);\r\n        })()\r\n    },[props.userId])\r\n    return(\r\n        <span className=\"text-muted\">\r\n            {userPublicProfile.name ? `- ${userPublicProfile.name} (@${userPublicProfile.username})`: <Spinner animation=\"border\" role=\"status\" size=\"sm\"/>}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default UserSummary;","import React from 'react';\r\nimport { FaUserAlt } from \"react-icons/fa\";\r\nimport {Card} from 'react-bootstrap';\r\nimport UserSummary from './UserSummary';\r\n\r\nconst Post = (props) => {\r\n    return  (\r\n        <Card className=\"mb-3\">\r\n            <Card.Body>\r\n                <FaUserAlt className=\"mr-3 mb-3\"/><br/>\r\n                <h4>{props.title}</h4>\r\n                {props.body}<br/>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                <UserSummary userId={props.userId}/>\r\n            </Card.Footer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { FaGlobe,FaBell, FaUserAlt,FaIdBadge } from \"react-icons/fa\";\r\nimport {Navbar, Form, Nav, FormControl, Button} from 'react-bootstrap';\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#home\">Qusol-Image</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"ml-4 mr-auto\">\r\n            <Nav.Link href=\"#home\">Trending</Nav.Link>\r\n            <Nav.Link href=\"#article\">Article</Nav.Link>\r\n            <Nav.Link href=\"#answer\">Answer</Nav.Link>\r\n            <Nav.Link href=\"#blogs\">Blog</Nav.Link>\r\n            <Nav.Link href=\"#poll\">Poll</Nav.Link>\r\n            {/*<NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n              </NavDropdown> */}\r\n            </Nav>\r\n            <Form inline>\r\n              <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n              <Button variant=\"outline-success\">Search</Button>\r\n            </Form>\r\n            <Nav className=\"ml-5 mr-4\">\r\n              <Nav.Link href=\"#globe\"><FaGlobe/></Nav.Link>\r\n              <Nav.Link href=\"#notifications\"><FaBell/></Nav.Link>\r\n              <Nav.Link href=\"#badges\"><FaIdBadge/></Nav.Link>\r\n              <Nav.Link href=\"#profile\"><FaUserAlt/></Nav.Link>\r\n            </Nav>\r\n        </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React, { useState, useEffect } from 'react';\r\nimport {ButtonGroup,ListGroup, Button,Fade} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nconst Category = (props) => {\r\n    const [open, setOpen] = useState(false);\r\n    const [follow, setFollow] = useState(props.following);\r\n    const toggleFollow=()=>{\r\n        setFollow(!follow); \r\n    }\r\n    return(\r\n        <ListGroup.Item\r\n            aria-controls=\"follow-button\"\r\n            onMouseEnter={() => setOpen(true)}\r\n            onMouseLeave={() => setOpen(false)}\r\n            className=\"d-flex justify-content-between align-items-center\"\r\n        >\r\n            <span>\r\n                {props.name}\r\n            </span>\r\n            <Fade in={open}>\r\n                <Button\r\n                    id=\"follow-button\"\r\n                    aria-expanded={open}\r\n                    onClick={toggleFollow}\r\n                    size=\"sm\"\r\n                    variant={follow?\"secondary\":\"primary\"}\r\n                >\r\n                    {follow?\"Unfollow\":\"Follow\"}\r\n                </Button>\r\n            </Fade>\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default Category;","import React, { useState, useEffect } from 'react';\r\nimport Category from './Category';\r\nimport {ListGroup, Card} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\nconst CategoriesPanel = () => {\r\n    const [categories,setCategories]=useState([]);\r\n    useEffect(()=>{\r\n        (async ()=>{\r\n          console.log('Fetching Posts');\r\n          setCategories((await axios.get('https://jsonplaceholder.typicode.com/users')).data);\r\n        })()\r\n    },[]);\r\n    return (\r\n        <Card>\r\n            <Card.Title className=\"pt-2 px-3\">Categories</Card.Title>\r\n            <Card.Body className=\"p-0\">\r\n                <ListGroup variant=\"flush\" className=\"border-top\">\r\n                    {categories.map((obj)=><Category name={obj.name} following={true}/>)}\r\n                </ListGroup>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default CategoriesPanel;","import React,{useState, useEffect} from 'react';\nimport { IconContext } from \"react-icons\";\nimport Post from './components/Post';\nimport Navbar from './components/Navbar';\nimport CategoriesPanel from './components/Categories';\nimport axios from 'axios';\nimport {Container,Col,Row} from 'react-bootstrap';\n\n\nfunction App() {\n  const [posts,setPosts]=useState([]);\n  useEffect(()=>{\n      (async ()=>{\n        console.log('Fetching Posts');\n        setPosts((await axios.get('https://jsonplaceholder.typicode.com/posts')).data);\n      })()\n  },[]);\n  return (\n    <IconContext.Provider value={{ size:\"1.5em\"}}>\n      <div className=\"App\">\n        <Navbar/>\n        <Container fluid className=\"mx-4 mt-2 w-auto\">\n          <Row>\n            <Col className=\"d-none d-md-block p-0\">\n              <CategoriesPanel/>\n            </Col>\n            <Col md={12} lg={7}>\n              {posts.map((obj)=><Post key={obj.id} title={obj.title} body={obj.body} userId={obj.userId}/>)}\n            </Col>\n            <Col className=\"d-none d-lg-block p-0\">\n              <CategoriesPanel/>\n            </Col>\n          </Row>\n        </Container>\n        \n      </div>\n    </IconContext.Provider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}